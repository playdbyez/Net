b00t2root [ctf]
cuz_rsa_is_lub
 
$ cat rsa.txt
(public n = p*q)
n= 71641831546926719303369645296528546480083425905458247405279061196214424558100678947996271179659761521775290973790597533683668081173314940392098256721488468660504161994357
n = 170 chars
n = 565 binnary form bit count 
 
(public e)
e = 65537
e = 5 chars
e = 17 binnary bit count
 
(ciphertext message)
c = 63127079832500412362950100242549738176318170072331491750802716138621322974529994914407846448954487685068331564008936808539420562251661435790855422130443584773306161128156
c = 170 chars
c = 565 binnary form bit count 
 
www.factordb.com
// paste n >> factorize p and q >>get p and q
 
p = 8464149782874043593254414191179506861158311266932799636000173971661904149225893113311
p = 85 chars
p = 283 binnary form bit count 
 
q = 8464149782874043593254414191179506861158311266932799636000173971661904149225893113387
q = 85 chars
q = 283 binnary form bit count 
 
 
 
phi = (p - 1) * (q - 1) 
phi = 7164183154692671930336964529652854648008342590545824740527906119
phi ?= 23256941069117913008032972032460853116445024256000
 
#!/usr/bin/env python
 
from Crypto.Util.number import inverse
 
phi = (p - 1) * (q - 1)
 
d = inverse(e,phi)
// inverse = d * e = 1 mod(phi)
 
 
// calculate m the message from c
m = pow( c, d, n)
 
printf hex(m)[2:1].decode ('hex')
// [2:1]   = eliminates the 0x from the hex output
// .decode = translates hex to chars
 
Output: b00t2root{RSA_c4n_b3_vuln3r4bl3}
