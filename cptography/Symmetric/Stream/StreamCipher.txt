
[] Stream Cipher []

.Encryption  
c = m ⊕ k

m = plainText.priv  
k = key + keystream generator.priv  
e = function.pub  
c = cipherText.pub  
 
m = 1 1 0 0 1 0 1 0 1  [405 decimal]
k = 1 0 1 0 0 1 1 1 0  [334 decimal]

c = 0 1 1 0 1 1 0 1 1  [219 decimal]


.Decryption  
m = c ⊕ k  

c = 0 1 1 0 1 1 0 1 1  [DB  hex]
k = 1 0 1 0 0 1 1 1 0  [14E hex]

m = 1 1 0 0 1 0 1 0 1  [195 hex]



Formula Index :
i = increasing variable (i++)
Y1, Y2, Y3, ... = bits
X1, X2, X3 ... = plaintext letters a,b,c, ...
S1, S2, S3 ... = crypto key
e(...)         = Encrypts on ...
d(...)         = Decrypts on ...

> Stream Encryption Operation <
[ Yi = e(Xi) = Xi + Si mod2 ] 

> Stream Decryption Operation <
[ Xi = d(Yi) = Yi + Si mod2 ]





// Why is decryption formula using addition ?
Mod2 addition and subtraction are the same.
Mod2 addition is the same as ⊕ operation

.Example of removing 2Si
Yi + Si mod2 
= (Yi + Si) +Si mod2  
= Yi + 2Si mod2 
= Yi Mod2 

.Mod2 | XOR  Truth table 
Xi   +   Si  =   Yi
0        0        0
0        1        1
1        0        1
1        1        0
This table proves that encryption rate of bits are 50% variable 
since a plain text zero has 50% of chance of being 1 or 0 when the key is applied. 




Where do we get the key (Si) ?






> If the same key is used repeatedly, it can reveal a relationship between messages.
  Suppose Eve intercepts two messages:
    c1 = m1 ⊕ k 
    c2 = m2 ⊕ k 
  A relationship between m1 and m2 can be determined via:
    c1 ⊕ c2 = (m1 ⊕ k ) ⊕ (m2 ⊕ k) = m1 ⊕ m2




> Symmetric primitive.

> Low computing complexity requirements.

> This cipher takes a stream of bits and encrypts them individually (bit-by-bit).
  The cipher is then obtained from the plaintext by combining it with a pseudorandom stream of keys.

> Combining operation is usually ⊕.

> Hardware centric while also faster than block ciphers.

> Simple to implement in applications where plaintext comes 
  in unknowable lengths like a wireless connection.

> Implemented in real-time audio, video and in GSM when encrypting calls into a relay.

> Ideally, even if an attacker knows the first billion bits of the keystream k,
  he's probability of guessing the next bit correctly should be no better than 1/2.

> There is no error propagation for ciphertext bits altered while in transit.
  If a single bit gets mangled by an attacker or poor signal, then only that
  one bit will be affected upon decryption.

> In case of the above, MACs wore designed specifically to minimise the mangling
  of bits during transmission via stream ciphers.

> Natural generalization of the shift cipher.

> Loosely based on the One-Time Pad cipher's concept of perfect security.

> A key produced by a keystream generator is only secure if:
  - it has large linear complexity
  - it has pseudo-random properties proven by passing a number of statistical random number tests.
  - N ...

