Cryptography 2010
by Christof Paar


//Kerckhuff's Principle [ 1883 ]
"A crypto system should be secure even if an attacker knows of the details about the system,
with the exception of the secret key"
This passage remarks that a sharing keys requires lots of nuance and creative methods.
There is no mathematical proof that any cryptographic algorithm is 100% secure.
Only the duration of how many years a given crypto-algorithm has remained unbroken can be ascertained.
Algorithms should be released public but not the key.

Expect a cryptosystem to be eventually broken, either through computing 
improvements or an algorithmic breakthrough.

Unconditionally secure systems cannot be broken even with infinite computing power.



-        Cryptology          -
Although Security is a bigger concept that encompasses cryptology,
Security cannot be achieved only by cryptology 
but with standardized algorithms, cipher-text, encrypt/decrypt keys

<> Cryptography
Building a secure algorithm.
Complexity theory + Information theory

> Symmetric Algorithms
> Asymmetric Algorithms
> Protocols
> Keyspace

<> Cryptanalysis
Deconstructing a secure algorithm.
> Classical == Looking at the cipher as a blackbox, we an only infer and observe input and output with the help of a bruteforce vector, for example.
> Analytical == Inspecting the cipher's schematic, for example, letter frequencies are maintained


<> Weaknessess
> BruteForce
> Exhaustive KeySearch

############::Cryptographic Protocols::############## 

[1] Mutually trusting parties
These types of protocols infer that both parties have the same security goals,
they also assume that an adversary is external to the protocol.
- Encryption
- Hash functions
- MACs
- Digital Signatures

[2] Mutually untrusting parties
These assume that the parties involved have conflicting/different security goals
The adversaies are parties within  the protocol.
- Commitment Schemes
- Oblivious Transfer






Keysearch on an FPGA based,cryptanalitical algorithm 'Copacobana' key searches can take up to 1 week
Copacabana's max keysearch = 2^56


############::Letter Frequency Analysis ::##############

//Substitution Cipher
Operates on latters and its aimed at replacing every letter by a fixed ciphertext letter.

//0Bruteforce


>Letters have different frequencies in english
>The frequency of plaintext letters  is preserved  in ciphertext
>Almost 13% of all letters in a string is the letter 'E' ==  every 7th or 8th letter is an E
>About 9% of all letters in a string is the letter 'T'





########################### :: Randomness :: #########################################


//When implementing any sort of encryption along a channel 
            its necessary to first determine randomness of the cypher key between both end-points

<>Random Number Generator

> True random number generator (TRNG)
True random numbers stem from random physical processes.
(coin-flip)

>

>




::::::::::::::::::

//Exercise 2:
Compute the following:
13 x 16 - 8


########################### :: L3 :: #########################################



// Block Cipher


########################'############# # RESOURCES # ###########'############################

www.decode.fr
// Cipher database

www.icyberchef.com
//Decoding algorithms

www.steghide.sourceforge.net
//Review data within jpeg,bmp,au,wav files

www.neatnik.net/steganographr
//Online revealer for zero-width spacing technique
//Stegno converts text to bin and convert bin into a string of zero width chars
// Insert string text that may have non-displayed characters 
// Press d3steganogr4phize

www.stylesuxx.github.io
//image decoder

//Base64 encoding
//alphanumeric string ends with one or two assignment operator

www.openssl.org/docs/
//SSL Documentation

SETI@home
//Joint computing over the net

################################################################################################
