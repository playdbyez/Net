

############ Primality Testing Methods ################


### [] Sieve of Eratosthene [] ###

[] Determines the primes within a set of size N
[] N being the unknown number
[] F being all values included from 2 to N


Set F;
int j = 0;
for (i = 2 ; i < N; i++)
{
  F[j] = i;
  j++;
}

Then for each element within F,
all its divisors get eliminated from the list
until all remaining values within the set are prime

N = 15
F[13] = {2,3,4,5,6,7,8,9,10,11,12,13,14,15}

for (i = 0 ; i < N; i++)
{  for (j = 0 ; j < N; j++)
    {
      if (F[j] / F[i] != a fractional value ) 
      {  if (j != i){delete F[i]} }
    }
}


#################################################################

### [] Trial Division [] ###
FACTORIZATION??

[] Determines if N is prime or composite
[] Only works if N doest not have a perfect square of a single value,
   otherwise the integer would have an equal number for both factors.
Perfect square :
a² = N

[] Best method for when N =< 10¹²
[] N being a random number
[] First Check if N is even through dividing it by 2
[] If a divisor is found from 3 to √N then N is composite
[] Only consider odd, divisors


N = 49
if (N / 2 == even) {N is composite}
for ( i = 3 ; i < sqrt(N); i++)
{
  if (i != even)
    {  if (N / i != a fractional value) 
          { N is composite }
    }
}
else {N is prime}

#### ALTERNATIVE #####

int e = 0;
for ( i = 2 ; i < sqrt(N); i++)
{
  if (N mod(i) == 0)
  {  
      while (N mod(i) == 0)
      {
       e++;
       N = N/i;
      }
  printf ("Factors %d and %d = N", i, e);
  }
}

#################################################################


