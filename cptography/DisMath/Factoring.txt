
############ Factoring ################

Factoring is the process of finding factors to a single known value.
Essentially the process of un-multiplying a value.
Necessary when analysing publick key systems.
Each method of factoring varies in efficiency depending on the size of the input.


Well-known techniques:
DARK AGE METHODS
> Trial Division
> Pollard's p - 1 Method
> William's p + 1 Method
> Pollard rho Method


MODERN METHODS
> Continued Fraction Method (CFRAC)
> Quadratic Sieve (QS)
> Eliptic Curve Method (ECM)
> Number Field Sieve (NFS)




## Basic prime verification:
n = prime or not
n >= 1
for (i =2; i < n-1;i++)
{if i divides n = n is not a prime}
However n-1 is an unoptimal value to increment to.

##################################################################

## Trial Division
Try every prime number up to √N to see if it is a factor of N
 [] exponent time algorithm
 [] dark age method of factoring
 [] best method for numbers less than 10¹² = 1000000000000


int e  = 0;
for ( i = 2; i < √N; i++)
{
if (N mod(i) == 0)
  {
    while (N mod(i) == 0)
      {
      e++;
      N =  N/i;
      }
  printf("factors %d and %d", i, e);
  }
}


 [] time complexity is exponential O(√N) = O(2^log2N/2) = Ln (1,1)
 [] Only works on values that do not have a perfect square number
 [] A pefect square is when both factors to N are the same number and hence, said squaring factor is equal to N
    a² = N
[] factoring is of coprime factors, int i should be only output if it is prime. 


[1] Trial Division factoring logic
 
If a divides n
Then b should be equal to n/a
b should divide n 
Hence a x b = n
 
 
Because all factors of n exist in pairs
a and b are cofactors
 
>When factoring for n
If a = b then n is a perfect square
then a² = n
and  a = √n
 
>When factoring for n
If a < b 
then a < √n and b > √n
and viceversa
 
Thus if a and b are not equal
one of them is greater then the sqrt(n)
 
[2] Trial division verification:
n = prime or not
n >= 1
for (i =2; i < sqrt(n); i++)
{if i divides n = n is not a prime}

#############################################################################

AKS primality testing ?


